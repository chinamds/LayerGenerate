{$Comment1}
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using {101}.Interfaces;

namespace {26}
{
	/// <summary>
	/// A collection of <see cref="I{1}" /> objects.
	/// </summary>
	public class {1}Collection : Collection<I{1}>, I{1}Collection
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="{1}Collection"/> class.
		/// </summary>
		public {1}Collection()
			: base(new List<I{1}>())
		{
		}

		/// <summary>
		/// Sort the objects in this collection based on the <see cref="I{1}.{9}" /> property.
		/// </summary>
		public void Sort()
		{
			// We know {8}s is actually a List<I{1}> because we passed it to the constructor.
			List<I{1}> {8}s = (List<I{1}>)Items;

			{8}s.Sort();
		}

		/// <summary>
		/// Adds the {8}s to the current collection.
		/// </summary>
		/// <param name="{8}s">The {8}s to add to the current collection.</param>
		/// <exception cref="ArgumentNullException">Thrown when <paramref name="{8}s" /> is null.</exception>
		public void AddRange(IEnumerable<I{1}> {8}s)
		{
			if ({8}s == null)
				throw new ArgumentNullException("{8}s");

			foreach (I{1} {8} in {8}s)
			{
				this.Add({8});
			}
		}

		/// <summary>
		/// Find the {8} in the collection that matches the specified <paramref name="{8}Id" />. If no matching object is found,
		/// null is returned.
		/// </summary>
		/// <param name="{8}Id">The ID that uniquely identifies the {8}.</param>
		/// <returns>Returns an <see cref="I{1}" />object from the collection that matches the specified <paramref name="{8}Id" />,
		/// or null if no matching object is found.</returns>
		public I{1} FindById({12} {8}Id)
		{
			List<I{1}> {8}s = (List<I{1}>)Items;

			return {8}s.Find(delegate(I{1} {8})
			{
				return ({8}.{9} == {8}Id);
			});
		}

		/// <summary>
		/// Creates a new, empty instance of an <see cref="I{1}" /> object. This method can be used by code that only has a 
		/// reference to the interface layer and therefore cannot create a new instance of an object on its own.
		/// </summary>
		/// <returns>Returns a new, empty instance of an <see cref="I{1}" /> object.</returns>
		public I{1} CreateEmpty{1}Instance()
		{
			return new {5}();
		}

		/// <summary>
		/// Creates a new, empty instance of an <see cref="I{1}Collection" /> object. This method can be used by code that only has a 
		/// reference to the interface layer and therefore cannot create a new instance of an object on its own.
		/// </summary>
		/// <returns>Returns a new, empty instance of an <see cref="I{1}Collection" /> object.</returns>
		public I{1}Collection CreateEmpty{1}Collection()
		{
			return new {1}Collection();
		}

		/// <summary>
		/// Creates a new collection containing deep copies of the items it contains.
		/// </summary>
		/// <returns>Returns a new collection containing deep copies of the items it contains.</returns>
		public I{1}Collection Copy()
		{
			I{1}Collection copy = new {1}Collection();

			foreach (I{1} {8} in (List<I{1}>)Items)
			{
				copy.Add({8}.Copy());
			}

			return copy;
		}

		/// <summary>
		/// Determines whether the <paramref name="item"/> is already a member of the collection. An object is considered a member
		/// of the collection if they both have the same <see cref="I{1}.{1}Id" />.
		/// </summary>
		/// <param name="item">An <see cref="I{1}"/> to determine whether it is a member of the current collection.</param>
		/// <returns>Returns <c>true</c> if <paramref name="item"/> is a member of the current collection;
		/// otherwise returns <c>false</c>.</returns>
		public new bool Contains(I{1} item)
		{
			if (item == null)
				return false;

			foreach (I{1} {8}InCollection in (List<I{1}>)Items)
			{
				if ({8}InCollection.{9} == item.{9})
				{
					return true;
				}
			}
			return false;
		}

		/// <summary>
		/// Adds the specified {8}.
		/// </summary>
		/// <param name="item">The {8} to add.</param>
		/// <exception cref="ArgumentNullException">Thrown when <paramref name="item" /> is null.</exception>
		public new void Add(I{1} item)
		{
			if (item == null)
				throw new ArgumentNullException("item", "Cannot add null to an existing {1}Collection. Items.Count = " + Items.Count);

			base.Add(item);
		}
	}
}
