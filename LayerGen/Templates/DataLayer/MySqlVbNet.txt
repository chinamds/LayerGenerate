{$Comment1}

Option Strict On
Option Explicit On
Option Infer Off

Imports System
Imports System.Data.SqlTypes
Imports System.IO
Imports System.Runtime.Serialization.Formatters.Binary
Imports System.Collections.Generic
Imports System.Data
Imports MySql.Data.MySqlClient
Imports MySql.Data.Types

Namespace {26}
    <Serializable> _
    Partial Public MustInherit Class {1}

        {$Comment}' Loads the connection string from the Universal class{/$Comment}
        Private ReadOnly ConnectionString As String = Universal.GetConnectionString()

{2}
{22}
        {$Comment}' isDirty flag determines whether data has been changed.{/$Comment}
        Private _isDirty As Boolean
        Private ReadOnly _connectionString As String
        {$Comment}' isUpdate flag determines whether we need to do an update or an insert when saving.{/$Comment}
        Protected _isUpdate As Boolean
        {$Comment}' isReadOnly determines if the row is in a read only state. This happens when partial{/$Comment}
        {$Comment}' fields are loaded.{/$Comment}
        Private _isReadOnly As Boolean
        {/*}{$Comment}' concurrencyArray holds a serialized version of a database row to make concurrency work.{/$Comment}
        Private _concurrencyArray As Byte()
        Private ReadOnly _concurrency As {27}.{1}.ConcurrencyOptions{*/}

        Private ReadOnly _layerGenUseStoredProcedures As Boolean = False
        Protected Const LayerGenTableName As String = "{3}"
        Protected Const LayerGenTableNameDelimited As String = "`{3}`"
        {/*}Private Const LayerGenFieldNames As String = "{4}"
        Private Const LayerGenValueNames As String = "{5}"
        Protected Const LayerGenPrimaryKey As String = "{6}"{*/}

        {$Comment}' nullDictionary is a dictionary for keeping track of which fields are null values.{/$Comment}
        Private ReadOnly _nullDictionary As Dictionary(Of {27}.{1}.Fields, Boolean)
        {$Comment}' internalNameDictionary is a dictionary for holding the names of the fields, as they are in SQL Server.{/$Comment}
        Private ReadOnly _internalNameDictionary As Dictionary(Of {27}.{1}.Fields, String)
{18}
        
{7}
{21}

        ''' <summary>
        ''' Initializes a new instance of the <see cref="{1}"/> class.
        ''' </summary>
        Protected Sub New()
            {$Comment}' By default, use Sql text instead of stored procedures.{/$Comment}
			_layerGenUseStoredProcedures = False
            {/*}{$Comment}' By default, set concurrency to Ignore.{/$Comment}
            _concurrency = {27}.{1}.ConcurrencyOptions.Ignore{*/}
            {$Comment}' Since no row was loaded, this will be an insert and not an update.{/$Comment}
            _isUpdate = False
            {$Comment}' Since no data was modified yet, set the dirty flag to false.{/$Comment}
            _isDirty = False
            {$Comment}' Since all fields were loaded, this is not read only.{/$Comment}
            _isReadOnly = False
            {$Comment}' Set the connection string.{/$Comment}
            _connectionString = ConnectionString
{9}
{10}

            {/*}_oldPrimaryKeyValue = {8}{*/}
        End Sub

        ''' <summary>
        ''' Initializes a new instance of the <see cref="{1}"/> class, specifying
        ''' if you want to use stored procedures or Sql text commands for data access.
        ''' </summary>
        ''' <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        Protected Sub New(useStoredProcedures As Boolean)
			_layerGenUseStoredProcedures = useStoredProcedures
            {/*}{$Comment}' By default, set concurrency to Ignore.{/$Comment}
            _concurrency = {27}.{1}.ConcurrencyOptions.Ignore{*/}
            {$Comment}' Since no row was loaded, this will be an insert and not an update.{/$Comment}
            _isUpdate = False
            {$Comment}' Since no data was modified yet, set the dirty flag to false.{/$Comment}
            _isDirty = False
            {$Comment}' Since all fields were loaded, this is not read only.{/$Comment}
            _isReadOnly = False
            {$Comment}' Set the connection string.{/$Comment}
            _connectionString = ConnectionString
{9}
{10}

            {/*}_oldPrimaryKeyValue = {8}{*/}
        End Sub

{/*}
        ''' <summary>
        ''' Initializes a new instance of the <see cref="{1}"/> class, loading a
        ''' row from the database that matches the given primary key.
        ''' </summary>
        ''' <param name="id">The primary key of the row that gets loaded from the database.</param>
        Protected Sub New(id As {19})
            {$Comment}' By default, use Sql text instead of stored procedures.{/$Comment}
			_layerGenUseStoredProcedures = False
            {$Comment}' By default, set concurrency to Ignore.{/$Comment}
            _concurrency = {27}.{1}.ConcurrencyOptions.Ignore
            {$Comment}' Since a row was loaded, this will be an update and not an insert.{/$Comment}
            _isUpdate = True
            {$Comment}' Since no data was modified yet, set the dirty flag to false.{/$Comment}
            _isDirty = False
            {$Comment}' Since all fields were loaded, this is not read only.{/$Comment}
            _isReadOnly = False
            {$Comment}' Set the connection string.{/$Comment}
            _connectionString = ConnectionString
{9}
{10}            
            [Get](id){*/}
            {/*}_oldPrimaryKeyValue = {8}{*/}
        {/*}End Sub{*/}

{/*}
        ''' <summary>
        ''' Initializes a new instance of the <see cref="{1}"/> class, loading a
        ''' row from the database that matches the given primary key.
        ''' </summary>
        ''' <param name="id">The primary key of the row that gets loaded from the database.</param>
        ''' <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        Protected Sub New(id As {19}, useStoredProcedures As Boolean)
			_layerGenUseStoredProcedures = useStoredProcedures
            {$Comment}' By default, set concurrency to Ignore.{/$Comment}
            _concurrency = {27}.{1}.ConcurrencyOptions.Ignore
            {$Comment}' Since a row was loaded, this will be an update and not an insert.{/$Comment}
            _isUpdate = True
            {$Comment}' Since no data was modified yet, set the dirty flag to false.{/$Comment}
            _isDirty = False
            {$Comment}' Since all fields were loaded, this is not read only.{/$Comment}
            _isReadOnly = False
            {$Comment}' Set the connection string.{/$Comment}
            _connectionString = ConnectionString
{9}
{10}            
            [Get](id){*/}
            {/*}_oldPrimaryKeyValue = {8}{*/}
        {/*}End Sub{*/}
{/*}
        ''' <summary>
        ''' Initializes a new instance of the <see cref="{1}"/> class, loading a
        ''' row from the database that matches the given primary key and loading
        ''' only the fields specified.
        ''' </summary>
        ''' <param name="id">The primary key of the row that gets loaded from the database.</param>
        ''' <param name="myFields">The list of <see cref="{27}.{1}.Fields"/> to pull from the database.</param>
        Protected Sub New(id As {19}, myFields As List(Of {27}.{1}.Fields))
            {$Comment}' By default, use Sql text instead of stored procedures.{/$Comment}
			_layerGenUseStoredProcedures = False
            {$Comment}' By default, set concurrency to Ignore.{/$Comment}
            _concurrency = {27}.{1}.ConcurrencyOptions.Ignore
            {$Comment}' Since a row was loaded, this will be an update and not an insert.{/$Comment}
            _isUpdate = True
            {$Comment}' Since no data was modified yet, set the dirty flag to false.{/$Comment}
            _isDirty = False
            {$Comment}' Since this is a partial load, set read only to true.{/$Comment}
            _isReadOnly = myFields IsNot Nothing AndAlso myFields.Count <> 0
            {$Comment}' Set the connection string.{/$Comment}
            _connectionString = ConnectionString
{9}
{10}
            [Get](id, myFields){*/}
            {/*}_oldPrimaryKeyValue = {8}{*/}
        {/*}End Sub{*/}

{/*}
        ''' <summary>
        ''' Initializes a new instance of the <see cref="{1}"/> class, loading a
        ''' row from the database that matches the given primary key and loading
        ''' only the fields specified.
        ''' </summary>
        ''' <param name="id">The primary key of the row that gets loaded from the database.</param>
        ''' <param name="myFields">The list of <see cref="{27}.{1}.Fields"/> to pull from the database.</param>
        ''' <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        Protected Sub New(id As {19}, myFields As List(Of {27}.{1}.Fields), useStoredProcedures As Boolean)
			_layerGenUseStoredProcedures = useStoredProcedures
            {$Comment}' By default, set concurrency to Ignore.{/$Comment}
            _concurrency = {27}.{1}.ConcurrencyOptions.Ignore
            {$Comment}' Since a row was loaded, this will be an update and not an insert.{/$Comment}
            _isUpdate = True
            {$Comment}' Since no data was modified yet, set the dirty flag to false.{/$Comment}
            _isDirty = False
            {$Comment}' Since this is a partial load, set read only to true.{/$Comment}
            _isReadOnly = myFields IsNot Nothing AndAlso myFields.Count <> 0
            {$Comment}' Set the connection string.{/$Comment}
            _connectionString = ConnectionString
{9}
{10}
            [Get](id, myFields)
            {/*}_oldPrimaryKeyValue = {8}{*/}
        {/*}End Sub{*/}

        ''' <summary>
        ''' Initializes a new instance of the <see cref="{1}"/> class, loading a
        ''' row from the given DataRow.
        ''' </summary>
        ''' <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        Protected Sub New(dr As DataRow)
            {$Comment}' By default, use Sql text instead of stored procedures.{/$Comment}
			_layerGenUseStoredProcedures = False
            {/*}{$Comment}' By default, set concurrency to Ignore.{/$Comment}
            _concurrency = {27}.{1}.ConcurrencyOptions.Ignore{*/}
            {$Comment}' Since a row was loaded, this will be an update and not an insert.{/$Comment}
            _isUpdate = True
            {$Comment}' Since all fields were loaded, this is not read only.{/$Comment}
            _isReadOnly = False
            {$Comment}' Set the connection string.{/$Comment}
            _connectionString = ConnectionString
{9}
{10}
            Fill(dr)
            _isDirty = False
            {/*}_oldPrimaryKeyValue = {8}{*/}
        End Sub

        ''' <summary>
        ''' Initializes a new instance of the <see cref="{1}"/> class, loading a
        ''' row from the given DataRow.
        ''' </summary>
        ''' <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        ''' <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        Protected Sub New(dr As DataRow, useStoredProcedures As Boolean)
			_layerGenUseStoredProcedures = useStoredProcedures
            {/*}{$Comment}' By default, set concurrency to Ignore.{/$Comment}
            _concurrency = {27}.{1}.ConcurrencyOptions.Ignore{*/}
            {$Comment}' Since a row was loaded, this will be an update and not an insert.{/$Comment}
            _isUpdate = True
            {$Comment}' Since all fields were loaded, this is not read only.{/$Comment}
            _isReadOnly = False
            {$Comment}' Set the connection string.{/$Comment}
            _connectionString = ConnectionString
{9}
{10}
            Fill(dr)
            _isDirty = False
            {/*}_oldPrimaryKeyValue = {8}{*/}
        End Sub

        {/*}''' <summary>
        ''' Initializes a new instance of the <see cref="{1}"/> class, explicitly enabling
        ''' or disabling the concurrency option.
        ''' </summary>
        ''' <param name="concurrency">A <see cref="{27}.{1}.ConcurrencyOptions"/> value indication the level of concurrency.</param>
        Protected Sub New(concurrency As {27}.{1}.ConcurrencyOptions)
            {$Comment}' By default, use Sql text instead of stored procedures.{/$Comment}
			_layerGenUseStoredProcedures = False
            {$Comment}' Set concurrency.{/$Comment}
            _concurrency = concurrency
            {$Comment}' Since no row was loaded, this will be an insert and not an update.{/$Comment}
            _isUpdate = False
            {$Comment}' Since no data was modified yet, set the dirty flag to false.{/$Comment}
            _isDirty = False
            {$Comment}' Since all fields were loaded, this is not read only.{/$Comment}
            _isReadOnly = False
            {$Comment}' Set the connection string.{/$Comment}
            _connectionString = ConnectionString
{9}
{10}{*/}

            {/*}_oldPrimaryKeyValue = {8}{*/}
        {/*}End Sub{*/}

        {/*}''' <summary>
        ''' Initializes a new instance of the <see cref="{1}"/> class, explicitly enabling
        ''' or disabling the concurrency option.
        ''' </summary>
        ''' <param name="concurrency">A <see cref="{27}.{1}.ConcurrencyOptions"/> value indication the level of concurrency.</param>
        ''' <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        Protected Sub New(concurrency As {27}.{1}.ConcurrencyOptions, useStoredProcedures As Boolean)
			_layerGenUseStoredProcedures = useStoredProcedures
            {$Comment}' Set concurrency.{/$Comment}
            _concurrency = concurrency
            {$Comment}' Since no row was loaded, this will be an insert and not an update.{/$Comment}
            _isUpdate = False
            {$Comment}' Since no data was modified yet, set the dirty flag to false.{/$Comment}
            _isDirty = False
            {$Comment}' Since all fields were loaded, this is not read only.{/$Comment}
            _isReadOnly = False
            {$Comment}' Set the connection string.{/$Comment}
            _connectionString = ConnectionString
{9}
{10}
{*/}
            {/*}_oldPrimaryKeyValue = {8}{*/}
        {/*}End Sub{*/}

{/*}
        ''' <summary>
        ''' Initializes a new instance of the <see cref="{1}"/> class, loading a
        ''' row from the database that matches the given primary key and explicitly
        ''' enabling or disabling the concurrency option.
        ''' </summary>
        ''' <param name="id">The primary key of the row that gets loaded from the database.</param>
        ''' <param name="concurrency">A <see cref="{27}.{1}.ConcurrencyOptions"/> value indication the level of concurrency.</param>
        Protected Sub New(id As {19}, concurrency As {27}.{1}.ConcurrencyOptions)
            {$Comment}' By default, use Sql text instead of stored procedures.{/$Comment}
			_layerGenUseStoredProcedures = False
            {$Comment}' Set concurrency.{/$Comment}
            _concurrency = concurrency
            {$Comment}' Since a row was loaded, this will be an update and not an insert.{/$Comment}
            _isUpdate = True
            {$Comment}' Since no data was modified yet, set the dirty flag to false.{/$Comment}
            _isDirty = False
            {$Comment}' Since all fields were loaded, this is not read only.{/$Comment}
            _isReadOnly = False
            {$Comment}' Set the connection string.{/$Comment}
            _connectionString = ConnectionString
{9}
{10}            
            [Get](id){*/}
            {/*}_oldPrimaryKeyValue = {8}{*/}
        {/*}End Sub{*/}
{/*}
        ''' <summary>
        ''' Initializes a new instance of the <see cref="{1}"/> class, loading a
        ''' row from the database that matches the given primary key and explicitly
        ''' enabling or disabling the concurrency option.
        ''' </summary>
        ''' <param name="id">The primary key of the row that gets loaded from the database.</param>
        ''' <param name="concurrency">A <see cref="{27}.{1}.ConcurrencyOptions"/> value indication the level of concurrency.</param>
        ''' <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        Protected Sub New(id As {19}, concurrency As {27}.{1}.ConcurrencyOptions, useStoredProcedures As Boolean)
			_layerGenUseStoredProcedures = useStoredProcedures
            {$Comment}' Set concurrency.{/$Comment}
            _concurrency = concurrency
            {$Comment}' Since a row was loaded, this will be an update and not an insert.{/$Comment}
            _isUpdate = True
            {$Comment}' Since no data was modified yet, set the dirty flag to false.{/$Comment}
            _isDirty = False
            {$Comment}' Since all fields were loaded, this is not read only.{/$Comment}
            _isReadOnly = False
            {$Comment}' Set the connection string.{/$Comment}
            _connectionString = ConnectionString
{9}
{10}            
            [Get](id){*/}
            {/*}_oldPrimaryKeyValue = {8}{*/}
        {/*}End Sub{*/}
{/*}
        ''' <summary>
        ''' Initializes a new instance of the <see cref="{1}"/> class, loading a
        ''' row from the database that matches the given primary key and loading
        ''' only the fields specified and explicitly enabling or disabling the
        ''' concurrency option.
        ''' </summary>
        ''' <param name="id">The primary key of the row that gets loaded from the database.</param>
        ''' <param name="myFields">The list of <see cref="{27}.{1}.Fields"/> to pull from the database.</param>
        ''' <param name="concurrency">A <see cref="{27}.{1}.ConcurrencyOptions"/> value indication the level of concurrency.</param>
        Protected Sub New(id As {19}, myFields As List(Of {27}.{1}.Fields), concurrency As {27}.{1}.ConcurrencyOptions)
            {$Comment}' By default, use Sql text instead of stored procedures.{/$Comment}
			_layerGenUseStoredProcedures = False
            {$Comment}' Set concurrency.{/$Comment}
            _concurrency = concurrency
            {$Comment}' Since a row was loaded, this will be an update and not an insert.{/$Comment}
            _isUpdate = True
            {$Comment}' Since no data was modified yet, set the dirty flag to false.{/$Comment}
            _isDirty = False
            {$Comment}' Since this is a partial load, set read only to true.{/$Comment}
            _isReadOnly = myFields IsNot Nothing AndAlso myFields.Count <> 0
            {$Comment}' Set the connection string.{/$Comment}
            _connectionString = ConnectionString
{9}
{10}
            [Get](id, myFields)
            {/*}_oldPrimaryKeyValue = {8}{*/}
        {/*}End Sub{*/}

{/*}
        ''' <summary>
        ''' Initializes a new instance of the <see cref="{1}"/> class, loading a
        ''' row from the database that matches the given primary key and loading
        ''' only the fields specified and explicitly enabling or disabling the
        ''' concurrency option.
        ''' </summary>
        ''' <param name="id">The primary key of the row that gets loaded from the database.</param>
        ''' <param name="myFields">The list of <see cref="{27}.{1}.Fields"/> to pull from the database.</param>
        ''' <param name="concurrency">A <see cref="{27}.{1}.ConcurrencyOptions"/> value indication the level of concurrency.</param>
        ''' <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        Protected Sub New(id As {19}, myFields As List(Of {27}.{1}.Fields), concurrency As {27}.{1}.ConcurrencyOptions, useStoredProcedures As Boolean)
			_layerGenUseStoredProcedures = useStoredProcedures
            {$Comment}' Set concurrency.{/$Comment}
            _concurrency = concurrency
            {$Comment}' Since a row was loaded, this will be an update and not an insert.{/$Comment}
            _isUpdate = True
            {$Comment}' Since no data was modified yet, set the dirty flag to false.{/$Comment}
            _isDirty = False
            {$Comment}' Since this is a partial load, set read only to true.{/$Comment}
            _isReadOnly = myFields IsNot Nothing AndAlso myFields.Count <> 0
            {$Comment}' Set the connection string.{/$Comment}
            _connectionString = ConnectionString
{9}
{10}
            [Get](id, myFields)
            {/*}_oldPrimaryKeyValue = {8}{*/}
        {/*}End Sub{*/}

{/*}
        ''' <summary>
        ''' Initializes a new instance of the <see cref="{1}"/> class, loading a
        ''' row from the given DataRow and explicitly enabling or disabling the
        ''' concurrency option.
        ''' </summary>
        ''' <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        ''' <param name="concurrency">A <see cref="{27}.{1}.ConcurrencyOptions"/> value indicating the level of concurrency.</param>
        Protected Sub New(dr As DataRow, concurrency As {27}.{1}.ConcurrencyOptions)
            {$Comment}' By default, use Sql text instead of stored procedures.{/$Comment}
			_layerGenUseStoredProcedures = False            
			{$Comment}' Set concurrency.{/$Comment}
            _concurrency = concurrency
            {$Comment}' Since a row was loaded, this will be an update and not an insert.{/$Comment}
            _isUpdate = True
            {$Comment}' Since all fields were loaded, this is not read only.{/$Comment}
            _isReadOnly = False
            {$Comment}' Set the connection string.{/$Comment}
            _connectionString = ConnectionString
{9}
{10}
            Fill(dr)
            _isDirty = False{*/}
            {/*}_oldPrimaryKeyValue = {8}{*/}
        {/*}End Sub{*/}

{/*}
        ''' <summary>
        ''' Initializes a new instance of the <see cref="{1}"/> class, loading a
        ''' row from the given DataRow and explicitly enabling or disabling the
        ''' concurrency option.
        ''' </summary>
        ''' <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        ''' <param name="concurrency">A <see cref="{27}.{1}.ConcurrencyOptions"/> value indicating the level of concurrency.</param>
        ''' <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        Protected Sub New(dr As DataRow, concurrency As {27}.{1}.ConcurrencyOptions, useStoredProcedures As Boolean)
			_layerGenUseStoredProcedures = useStoredProcedures            
			{$Comment}' Set concurrency.{/$Comment}
            _concurrency = concurrency
            {$Comment}' Since a row was loaded, this will be an update and not an insert.{/$Comment}
            _isUpdate = True
            {$Comment}' Since all fields were loaded, this is not read only.{/$Comment}
            _isReadOnly = False
            {$Comment}' Set the connection string.{/$Comment}
            _connectionString = ConnectionString
{9}
{10}
            Fill(dr)
            _isDirty = False{*/}
            {/*}_oldPrimaryKeyValue = {8}{*/}
        {/*}End Sub{*/}

        ''' <summary>
        ''' Reads a DataRow and populates the properties from the DataRow.
        ''' </summary>
        ''' <param name="dr">The DataRow that contains the data to be loaded into the properties.</param>
		Protected Sub Fill(dr As DataRow)
{11}
            {/*}If _concurrency <> {27}.{1}.ConcurrencyOptions.Ignore Then
                _concurrencyArray = GetSerializedObject(Me)
            End If{*/}
        End Sub

        ''' <summary>
        ''' Determines if the given field exists in the MySqlDataReader.
        ''' </summary>
        ''' <param name="fieldName">The name of the field to search for.</param>
        ''' <param name="reader">The MySqlDataReader to search in.</param>
        ''' <returns>Returns true if the field exists in the MySqlDataReader, otherwise, returns false.</returns>
        Protected Function HasField(fieldName As String, reader As MySqlDataReader) As Boolean
            For i As Integer = 0 To reader.FieldCount - 1
                If reader.GetName(i) = fieldName Then
                    Return True
                End If
            Next

            Return False
        End Function

        ''' <summary>
        ''' Determines if the given field exists in the DataRow.
        ''' </summary>
        ''' <param name="fieldName">The name of the field to search for.</param>
        ''' <param name="row">The DataRow to search in.</param>
        ''' <returns>Returns true if the field exists in the DataRow, otherwise, returns false.</returns>
        Protected Function HasField(fieldName As String, row As DataRow) As Boolean
            Return row.Table.Columns.Contains(fieldName)
        End Function

        {/*}''' <summary>
        ''' Retrieves the specified fields from the row with the matching
        ''' primary key from the database and stores them in the properties.
        ''' </summary>
        ''' <param name="id">The primary key of the row to pull.</param>
        ''' <param name="myFields">The fields to pull from the database.</param>
		Protected Sub [Get](id As {19}, myFields As List(Of {27}.{1}.Fields))
            Dim strFields As String = "`" & LayerGenPrimaryKey & "`,"

            If myFields Is Nothing OrElse myFields.Count = 0 Then
                strFields = "*"
            Else
                For Each field As {27}.{1}.Fields In myFields
                    strFields = strFields + "`" & _internalNameDictionary(field) & "`,"
                Next
                strFields = strFields.TrimEnd(","c)
            End If

{20}
            
            Using connection As New MySqlConnection()
                connection.ConnectionString = _connectionString

                Using command As New MySqlCommand()
                    connection.Open()
                    command.CommandType = If(_layerGenUseStoredProcedures, CommandType.StoredProcedure, CommandType.Text)
                    command.CommandText = If(_layerGenUseStoredProcedures, ("sp{1}_Select").Replace("@", ""), sql)
                    command.Connection = connection
                    If _layerGenUseStoredProcedures Then
                        command.Parameters.AddWithValue("@id", id)
                        command.Parameters.AddWithValue("@fields", strFields)
                    Else
{28}
                    End If

                    Using reader As MySqlDataReader = command.ExecuteReader()
                        If Not reader.HasRows Then
                            Throw New {27}.RowNotFoundException(LayerGenTableName & ": Could not find row with id of " & id)
                        End If

                        While reader.Read()
{12}
                        End While
                        If _concurrency <> {27}.{1}.ConcurrencyOptions.Ignore Then
                            _concurrencyArray = GetSerializedObject(Me)
                        End If
                    End Using
                End Using
            End Using
        End Sub

        ''' <summary>
        ''' Retrieves the row with the matching primary key from the
        ''' database and stores them in the properties.
        ''' </summary>
        ''' <param name="id">The primary key of the row to pull.</param>
        Private Sub [Get](id As {19})
            [Get](id, Nothing)
        End Sub{*/}

        ''' <summary>
        ''' Unsets the value of the given field to null.
        ''' </summary>
        ''' <param name="field">The field to unset as null.</param>
        Private Sub UnsetNull(field As {27}.{1}.Fields)
            _nullDictionary(field) = False
        End Sub

        ''' <summary>
        ''' Sets the value of the given field to null.
        ''' </summary>
        ''' <param name="field">The field to set as null.</param>
        Public Sub SetNull(field As {27}.{1}.Fields)
            _IsDirty = True
            _nullDictionary(field) = True
        End Sub

        ''' <summary>
        ''' Determines if the given field is null or if it contains a value.
        ''' </summary>
        ''' <param name="field">The field to test for a null value.</param>
        ''' <returns>True, if the field is null, otherwise, false.</returns>
        Public Function IsNull(field As {27}.{1}.Fields) As Boolean
            Return _nullDictionary(field)
        End Function

        ''' <summary>
        ''' Resets all properties to their default (null) value.
        ''' </summary>
        Private Sub ResetToDefault()
{13}
            {/*}_oldPrimaryKeyValue = {8}{*/}
        End Sub
{/*}
        ''' <summary>
        ''' Deletes this row from the database.
        ''' </summary>
        Public Sub Delete()
            If Not _layerGenUseStoredProcedures Then            
                Dim cmdString As String = "DELETE FROM `" & LayerGenTableName & "` WHERE `" & LayerGenPrimaryKey & "`={88}
                Using connection As New MySqlConnection()
                    connection.ConnectionString = _connectionString
                    connection.Open()
                    Using command As New MySqlCommand()
                        command.Connection = connection
                        command.CommandType = CommandType.Text
                        command.CommandText = cmdString

                        command.ExecuteNonQuery()
                    End Using
                End Using
            Else
                Using connection As New MySqlConnection()
                    connection.ConnectionString = _connectionString
                    connection.Open()
                    Using command As New MySqlCommand()
                        command.Connection = connection
                        command.CommandType = CommandType.StoredProcedure
                        command.CommandText = ("sp{1}_Delete").Replace("@", "")
                        command.Parameters.AddWithValue("@val1", {8})

                        command.ExecuteNonQuery()
                    End Using
                End Using
            End If
            ResetToDefault()
           _isDirty = False
           _isUpdate = False
        End Sub

        ''' <summary>
        ''' Saves this row to the database. It will either do an INSERT or an UPDATE
        ''' depending on whether this is a new row or an existing row.
        ''' </summary>
        ''' <exception cref="{27}.ReadOnlyException">Thrown if only partial fields have loaded. If this is a force save, then this exception will not be thrown.</exception>
        ''' <exception cref="{27}.OutOfSyncException">Thrown if concurrency is set to strict and the row being saved is out of sync with the row in the database.</exception>
        Public Sub Save()
            Save(False)
        End Sub

        ''' <summary>
        ''' Saves this row to the database. It will either do an INSERT or an UPDATE
        ''' depending on whether this is a new row or an existing row. You can specify
        ''' whether or not to force save this row. If only partial fields have been
        ''' loaded, force saving will force the row to save. Keep in mind though that
        ''' the fields that are not loaded will be overwritten with a null value.
        ''' </summary>
        ''' <param name="forceSave">True, if you want to force save the row.</param>
        ''' <exception cref="{27}.ReadOnlyException">Thrown if only partial fields have loaded. If this is a force save, then this exception will not be thrown.</exception>
        ''' <exception cref="{27}.OutOfSyncException">Thrown if concurrency is set to strict and the row being saved is out of sync with the row in the database.</exception>
        Public Sub Save(forceSave As Boolean)
            If Not _isDirty Then
                Return
            End If

            If _isReadOnly AndAlso forceSave = False Then
                Throw New {27}.ReadOnlyException(LayerGenTableName & " is in a read-only state because only partial fields have been loaded!")
            End If

            If Not _isUpdate Then
                If Not _layerGenUseStoredProcedures Then
                    Const cmdString As String = "INSERT INTO `" & LayerGenTableName & "` (" & LayerGenFieldNames & ") VALUES (" & LayerGenValueNames & "); SELECT LAST_INSERT_ID();"

                    Using connection As New MySqlConnection()
                        connection.ConnectionString = _connectionString
                        Using command As New MySqlCommand()
                            command.Connection = connection
                            command.CommandType = CommandType.Text
                            command.CommandText = cmdString

{14}
                            connection.Open()
                            Dim obj As Object = command.ExecuteScalar()
                            _oldPrimaryKeyValue = {8}
{15}
                            _isUpdate = True
                            _isDirty = False
                            If _concurrency <> {27}.{1}.ConcurrencyOptions.Ignore Then
                                _concurrencyArray = GetSerializedObject(Me)
                            End If
                        End Using
                    End Using
                Else
                    Using connection As New MySqlConnection()
                        connection.ConnectionString = _connectionString
                        Using command As New MySqlCommand()
                            command.Connection = connection
                            command.CommandType = CommandType.StoredProcedure
                            command.CommandText = ("sp{1}_Insert").Replace("@", "")
{14}
                            connection.Open()
                            Dim obj As Object = command.ExecuteScalar()
                            _oldPrimaryKeyValue = {8}
{15}
                            _isUpdate = True
                            _isDirty = False
                            If _concurrency <> {27}.{1}.ConcurrencyOptions.Ignore Then
                                _concurrencyArray = GetSerializedObject(Me)
                            End If
                        End Using
                    End Using
                End If
            Else
                If Not _layerGenUseStoredProcedures Then
{16}

                    Using connection As New MySqlConnection()
                        connection.ConnectionString = _connectionString
                        Using command As New MySqlCommand()
                            command.Connection = connection
                            command.CommandType = CommandType.Text
                            command.CommandText = cmdString
{14}
{17}
                            If _concurrency <> {27}.{1}.ConcurrencyOptions.Ignore Then
                                If Not IsDataEqual() Then
                                    Throw New {27}.OutOfSyncException(LayerGenTableName & ": Row is out of sync with database! Changes not written to database!")
                                End If
                            End If
                            connection.Open()
                            command.ExecuteNonQuery()
                            _oldPrimaryKeyValue = {8}
                            _isUpdate = True
                            _isDirty = False
                            If _concurrency <> {27}.{1}.ConcurrencyOptions.Ignore Then
                                _concurrencyArray = GetSerializedObject(Me)
                            End If
                        End Using
                    End Using
                Else
                    Using connection As New MySqlConnection()
                        connection.ConnectionString = _connectionString
                        Using command As New MySqlCommand()
                            command.Connection = connection
                            command.CommandType = CommandType.StoredProcedure
                            command.CommandText = ("sp{1}_Update").Replace("@", "")
{14}
{17}
                            If _concurrency <> {27}.{1}.ConcurrencyOptions.Ignore Then
                                If Not IsDataEqual() Then
                                    Throw New {27}.OutOfSyncException(LayerGenTableName & ": Row is out of sync with database! Changes not written to database!")
                                End If
                            End If
                            connection.Open()
                            command.ExecuteNonQuery()
                            _oldPrimaryKeyValue = {8}
                            _isUpdate = True
                            _isDirty = False
                            If _concurrency <> {27}.{1}.ConcurrencyOptions.Ignore Then
                                _concurrencyArray = GetSerializedObject(Me)
                            End If
                        End Using
                    End Using
                End If
            End If
        End Sub
{*/}
{23}
        ''' <summary>
        ''' Retrieves all rows and all fields from the {1} table.
        ''' </summary>
        ''' <returns>A <see cref="System.Data.DataTable" /> with all the data.</returns>
        Friend Shared Function GetAll(useStoredProcedures As Boolean) As DataTable
            If Not useStoredProcedures Then
                Return GetBySqlStatement("SELECT * FROM `" & LayerGenTableName & "`")
            End If
            Using connection As New MySqlConnection()
                connection.ConnectionString = Universal.GetConnectionString()
                Using command As New MySqlCommand()
                    command.Connection = connection
                    command.CommandType = CommandType.StoredProcedure
                    command.CommandText = ("sp{1}_GetAll").Replace("@", "")
                    command.Connection = connection
                    Using adapter As New MySqlDataAdapter()
                        Using ds As New DataSet()
                            adapter.SelectCommand = command
                            adapter.Fill(ds)

                            If ds.Tables.Count > 0 Then
                                Return ds.Tables(0)
                            End If
                        End Using
                    End Using
                End Using
            End Using
			Return Nothing
        End Function

        ''' <summary>
        ''' Retrieves rows from the {1} table by executing the given stored procedure.
        ''' </summary>
        ''' <param name="procedureName">The name of the stored procedure to execute.</param>
        ''' <param name="procedureParams">A dictionary of parameter/value pairs. This can be null if there are no parameters.</param>
        ''' <returns>A <see cref="System.Data.DataTable" /> with all the data.</returns>
        Friend Shared Function GetByStoredProcedure(procedureName As String, procedureParams As Dictionary(Of String, Object)) As DataTable
            Using connection As New MySqlConnection()
                connection.ConnectionString = Universal.GetConnectionString()
                Using command As New MySqlCommand()
                    command.Connection = connection
                    command.CommandType = CommandType.StoredProcedure
                    command.CommandText = procedureName
                    If procedureParams IsNot Nothing AndAlso procedureParams.Count > 0 Then
                        For Each kvp As KeyValuePair(Of String, Object) In procedureParams
                            command.Parameters.AddWithValue(kvp.Key, kvp.Value)
                        Next
                    End If

                    connection.Open()
                    Using adapter As New MySqlDataAdapter()
                        Using ds As New DataSet()
                            adapter.SelectCommand = command
                            adapter.Fill(ds)

                            If ds.Tables.Count > 0 Then
                                Return ds.Tables(0)
                            End If
                        End Using
                    End Using
                End Using
            End Using

            Return Nothing
        End Function

        ''' <summary>
        ''' Retrieves rows from the {1} table, based on the given SQL statement.
        ''' </summary>
        ''' <param name="sql">The SQL statement to execute.</param>
        ''' <param name="sqlParams">Optional <see cref="System.String.Format"/> like parameters</param>
        ''' <returns>A <see cref="System.Data.DataTable" /> with all the data.</returns>
        Friend Shared Function GetBySqlStatement(sql As String, ParamArray sqlParams As Object()) As DataTable
            Dim paramNdx As Integer = 0
            Dim valNdx As Integer = 1
            Dim paramValDictionary As New Dictionary(Of String, String)()

            For Each param As Object In sqlParams
                If TypeOf param Is String Then
                    sql = sql.Replace("'{" & paramNdx & "}'", "@val" & valNdx)
                    sql = sql.Replace("{" & paramNdx & "}", "@val" & valNdx)
                    paramValDictionary.Add("@val" & valNdx, DirectCast(param, String))
                    valNdx += 1
                Else
                    sql = sql.Replace("{" & paramNdx & "}", param.ToString())
                End If
                paramNdx += 1
            Next

            Using connection As New MySqlConnection()
                connection.ConnectionString = Universal.GetConnectionString()
                Using command As New MySqlCommand()
                    command.Connection = connection
                    command.CommandType = CommandType.Text
                    command.CommandText = sql

                    connection.Open()
                    Using adapter As New MySqlDataAdapter()
                        Using ds As New DataSet()
                            adapter.SelectCommand = command
                            adapter.Fill(ds)

                            If ds.Tables.Count > 0 Then
                                Return ds.Tables(0)
                            End If
                        End Using
                    End Using
                End Using
            End Using
            Return Nothing
        End Function

{/*}        Private Function GetSerializedObject(cls As {1}) As Byte()
{24}
        End Function

        ''' <summary>
        ''' Determines of the current concurrency array is equal to what's in the database.
        ''' </summary>
        ''' <returns>True, if the data in memory is equal to whats in the database, otherwise false.</returns>
        Protected Function IsDataEqual() As Boolean
            Dim obj As New {27}.{1}({25})
            Dim myArray As Byte() = _concurrencyArray
            Dim clsArray As Byte() = GetSerializedObject(obj)

            If myArray.Length <> clsArray.Length Then
                Return False
            End If

            For i As Integer = 0 To myArray.Length - 1
                If myArray(i) <> clsArray(i) Then
                    Return False
                End If
            Next
            Return True
        End Function

        Private Function ObjectToByteArray(obj As Object) As Byte()
            If obj Is Nothing Then
                Return New Byte() {}
            End If

            If TypeOf obj Is MySqlGeometry Then
                Dim obj2 As MySqlGeometry = DirectCast(obj, MySqlGeometry)
                Dim sg As New SimpleGeometry()
                sg.X = obj2.XCoordinate
                sg.Y = obj2.YCoordinate
                sg.Srid = obj2.SRID
                sg.Value = obj2.Value
                obj = sg
            End If

            Dim bf As New BinaryFormatter()
            Using memStream As New MemoryStream()
                bf.Serialize(memStream, obj)
                Return memStream.ToArray()
            End Using
        End Function
		
        <Serializable> _
        Private Class SimpleGeometry
            Private m_Srid As System.Nullable(Of Integer)
            Private m_X As System.Nullable(Of Double)
	        Private m_Y As System.Nullable(Of Double)
            Private m_Value As Byte()

	        Public Property X() As System.Nullable(Of Double)
                Get
                    Return m_X
                End Get
                Set
                    m_X = Value
                End Set
            End Property
            Public Property Y() As System.Nullable(Of Double)
                Get
                    Return m_Y
                End Get
                Set
                    m_Y = Value
                End Set
            End Property
            Public Property Value() As Byte()
                Get
                    Return m_Value
                End Get
                Set
                    m_Value = Value
                End Set
            End Property
            Public Property Srid() As System.Nullable(Of Integer)
                Get
                    Return m_Srid
                End Get
                Set
                    m_Srid = Value
                End Set
            End Property
        End Class
		{*/}
{33}
{34}
{32}
    End Class
End Namespace
